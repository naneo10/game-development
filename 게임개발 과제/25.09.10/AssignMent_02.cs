
namespace _25._09._10
{
    /*
    과제 02
    메모리 구조에 대해 정리
    참고 사이트: https://wonseok1112.tistory.com/59#%ED%9E%99(Heap)-1
                https://m.blog.naver.com/bamsunbic/221369673434
    */
    internal class AssignMent_02
    {
        static void Main ()
        {
            /*
            C#의 메모리 구조는 총 4가지 영역으로 나뉘어져 있다.
            1.스택(Stack): 값 형식이 저장되는 메모리 공간이며 메소드 호출에 필요한 메모리가 저장됨
            2.힙(Heap): 참조 형식이 저장되는 메모리 공간이며 동적 할당된 메모리가 저장됨
            3.데이터 영역(Data Segmant): 초기화된 또는 초기화되지 않은 정적, 전역변수가 저장됨
            4.코드 영역(Code Segment): 프로그램의 실행 코드가 저장됨

            [스택(Stack)]
            스택은 값 형식이 저장되는 메모리 공간
            지역변수, 매개변수, 리턴값 같은 메소드를 호출하는데 필요한 메모리가 저장됨
            스택 메모리는 LIFO(후입선출) 구조로, 메모리 할당과 해제가 매우 빠름
            보통 고정된 작은 크기를 가지고 있으며, 컴파일 시점에 크기가 결정됨

            1.지역변수
            -메서드나 블록 안에서 선언된 지역 변수는 스택에 저장됨
            -이러한 변수는 메서드나 블록이 끝나면 자동으로 해제되므로, 명시적인 메모리 관리가 필요하지 않음

            2,메서드 호출
            -메서드가 호출될 때 스택 프레임이 생성. 이 프레임에는 메서드의 매개변수, 반환 주소, 지역 변수가 포함
            -메서드가 호출될 때마다 새로운 스택 프레임이 추가, 메서드가 종료되면 해당 스택 프레임이 제거됨

            3.값 형식
            -int, float, bool과 같은 값 타입은 스택에 저장됨
            -값 형식은 스택에서 할당 및 해제되며, 힙 메모리 보다 성능상 이점이 있음
            -단, 값 형식이라도 참조 형식의 필드로 사용되면 힙에 저장됨

            4.재귀 메서드
            -재귀적으로 메서드를 호출할 때, 각 재귀 호출은 새로운 스택 프레임을 사용함
            -스택 오버플로우(Stack Overflow)는 너무 깊은 재귀 호출로 인해 스택 메모리가 초과될 때 발생

            [힙(Heap)]
            힙은 참조 형식이 저장되는 메모리 공간이며 동적할당으로 생성된 메모리가 저장됨
            일반적으로 스택보다 크며 동적 크기이다. 런타임 시점에 크기가 결정됨
            힙의 메모리는 가비지 콜렉터(Garbage Collector)에 의해 관리됨
            
            1.참조 타입(Reference Types)
            -클래스, 배열, 델리게이트, 객체 등 참조형식의 인스턴스는 힙에 할당됨
            -참조 형식은 메모리 주소(참조)를 통해 접근되며, 해당 주소는 스택에 저장되지만 실제 데이터는 힙에 저장
            
            2.큰 데이터
            -큰 데이터 구조(예:큰 배열, 복잡한 객체 그래프)는 스택에 저장하기에는 너무 크므로 힙에 저장됨
            -힙은 스택보다 메모리 공간이 크기 때문에 더 큰 메모리 블록을 저장할 수 있음

            3.긴 생명주기를 가진 데이터
            -프로그램의 여러 부분에서 오랜 기간 동안 사용되는 객체는 힙에 저장됨
            -예를 들어, 애플리케이션의 전체 실행 동안 유지되어야 하는 객체는 힙에 저장됨

            4.객체 간의 데이터 공유
            -여러 객체가 동일한 데이터를 공유하거나 동일한 객체를 참조해야 하는 경우, 이 데이터는 힙에 저장됨
            -힙에 저장된 객체의 참조는 스택을 통해 다른 객체에 전달될 수 있음

            5.동적 메모리 할당
            -런타임 중에 메모리 크기가 결정되거나 변경될 수 있는 데이터 구조(예: 동적으로 크기가 변하는 리스트)는
                힙에 할당됨
            -예를 들어, List<T>, Dictionary<TKey, TValue>와 같은 컬렉션 클래스는 힙을 사용하여
                동적으로 메모리를 할당함

            6.클로저(Closures)
            -람다 표현식이나 익명 메서드에서 사용하는 외부 변수들은 힙에 저장될 수 있음
            -클로저는 메서드가 종료된 후에도 변수에 대한 참조를 유지해야 하므로, 이들 변수는 힙에 저장됨

            [데이터 영역(Data Segment)]
            데이터 영역에는 정적 변수와 전역 변수가 저장되며, 초기화된 영역과 초기화되지 않은 영역으로 나뉨
            
            1.초기화된 영역(Initialized Data Segment)
            초기화된 영역에는 프로그램 시작 전에 초기화된 정적 변수 및 전역 변수가 저장됨
            public int InitValue = 0;
            public static int StaticInitValue = 0;

            2.초기화되지 않은 영역(ninitialized Data Segment)
            초기화되지 않은 영역에는 프로그램 시작 시, 초기화되지 않은 정적 변수 및 전역 변수가 저장됨
            기본 값은 자동으로 0으로 초기화
            public int InitValue;
            public static int StaticInitValue;

            [코드 영역(Code Segment)]
            이 영역에는 프로그램의 실행 코드가 저장되며, 일반적으로 읽기 전용
            메모리 보호 기법에 의해 실행 중에 변경되지 않는다
            1.#Region 지시문을 사용한 편집기 내 코드 블록
            2.스택과 힙 메모리에서 다루는 값, 참조 타입의 데이터 영역
            3.각 문맥의 유효 범위를 의미하는 코드 블록 범위
            */
        }
    }
}
